"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

import toml

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "crispy_bootstrap5",
    "apps.lexicon",
    "apps.feedback",
    "guardian",
    "django_registration",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "guardian.backends.ObjectPermissionBackend",
)
ANONYMOUS_USER_NAME = None  # disables anonymous user object in guardian

ROOT_URLCONF = "config.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "config.global_context.global_template_variables",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = os.getenv("TIME_ZONE", "Pacific/Port_Moresby")
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Crispy Forms settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# django-registration settings
ACCOUNT_ACTIVATION_DAYS = 7  # One-week activation window
REGISTRATION_OPEN = os.getenv("REGISTRATION_OPEN", "True").lower() in (
    "true",
    "1",
    "t",
    "yes",
)

# postgres settings
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "lexicon_app_db",
        "USER": "django",
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "1234"),
        "HOST": "db",
        "PORT": 5432,
    }
}

# email settings
admins_env = os.getenv("ADMINS")
if admins_env:
    ADMINS = [tuple(admin.strip().split(":", 1)) for admin in admins_env.split(",")]
else:
    ADMINS = []
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "NOT SET")
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv("EMAIL_SENDER", "NOT SET")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_PASSWORD", "NOT SET")
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER

SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-24#+mypq*=1v77s(37v+_$t!p7+iwdnq)$q&djz85vo$9f5sym"
)
ALLOWED_HOSTS = [host for host in os.getenv("ALLOWED_HOSTS", "").split(",") if host]
DEBUG = os.getenv("DEBUG", "True").lower() in ("true", "1", "t", "yes")


# Create a rotating log file data/lexicon.log
LOGGING_DIR = os.path.join("data", "logs")
os.makedirs(LOGGING_DIR, exist_ok=True)  # Ensure the directory exists

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s [%(levelname)s] %(name)s (%(filename)s:%(lineno)d) | %(message)s"
        },
    },
    "handlers": {
        "lexicon_log_file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGGING_DIR, "lexicon.log"),
            "maxBytes": 1024 * 1024 * 5,  # 5 MB - Adjust as needed
            "backupCount": 3,  # Keep 5 backup log files
            "formatter": "standard",
        },
        "user_log_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGGING_DIR, "user_activity.log"),
            "maxBytes": 1024 * 1024 * 5,  # 5 MB - Adjust as needed
            "backupCount": 3,  # Keep 5 backup log files
            "formatter": "standard",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
    },
    "loggers": {
        "lexicon": {
            "handlers": ["lexicon_log_file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "user_log": {
            "handlers": ["user_log_file"],
            "level": "INFO",
            "propagate": False,
        },
        # Catch errors from Django's core
        "django": {
            "handlers": ["lexicon_log_file"],
            "level": "ERROR",
            "propagate": False,
        },
        # Catch request/response errors (like 500s)
        "django.request": {
            "handlers": ["lexicon_log_file"],
            "level": "ERROR",
            "propagate": False,
        },
        # Optionally: log server exceptions (e.g. during runserver)
        "django.server": {
            "handlers": ["lexicon_log_file"],
            "level": "ERROR",
            "propagate": False,
        },
    },
    "root": {
        "handlers": [],  # You can add default handlers here if needed
        "level": "WARNING",
    },
}

# Celery task manager
CELERY_BROKER_URL = "redis://redis:6379/0"
CELERY_RESULT_BACKEND = "redis://redis:6379/0"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = os.getenv("TIME_ZONE", "Pacific/Port_Moresby")

# load the version from pyproject.toml
try:
    with open("pyproject.toml", "r") as f:
        pyproject_data = toml.load(f)
        version = pyproject_data["project"]["version"]
except FileNotFoundError:
    version = "0.0.0"  # Default if the file isn't found
except KeyError:
    version = "0.0.0"  # Default if the 'project' or 'version' keys are missing

# Production only settings, triggered by DEBUG=False
if not DEBUG:
    import sentry_sdk

    CSRF_COOKIE_SECURE = True
    CSRF_TRUSTED_ORIGINS = [f"https://{site}" for site in ALLOWED_HOSTS]
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = False  # Handled by nginx

    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN", ""),
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        _experiments={
            # Set continuous_profiling_auto_start to True
            # to automatically start the profiler on when
            # possible.
            "continuous_profiling_auto_start": True,
        },
    )
